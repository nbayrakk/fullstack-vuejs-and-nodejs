{"remainingRequest":"/Users/nafizbayrak/Downloads/task-Man/task-man/node_modules/babel-loader/lib/index.js!/Users/nafizbayrak/Downloads/task-Man/task-man/node_modules/eslint-loader/index.js??ref--13-0!/Users/nafizbayrak/Downloads/task-Man/task-man/src/store/modules/tasks.module.js","dependencies":[{"path":"/Users/nafizbayrak/Downloads/task-Man/task-man/src/store/modules/tasks.module.js","mtime":1621715675971},{"path":"/Users/nafizbayrak/Downloads/task-Man/task-man/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nafizbayrak/Downloads/task-Man/task-man/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/nafizbayrak/Downloads/task-Man/task-man/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9uYWZpemJheXJhay9Eb3dubG9hZHMvdGFzay1NYW4vdGFzay1tYW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCB0YXNrU2VydmljZSBmcm9tICcuLi8uLi9jb21tb24vdGFzay5zZXJ2aWNlJzsKdmFyIHN0YXRlID0gewogIHRhc2tzOiBbXSwKICB0YXNrOiB7fQp9Owp2YXIgYWN0aW9ucyA9IHsKICBmZXRjaFRhc2tzOiBmdW5jdGlvbiBmZXRjaFRhc2tzKF9yZWYpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBjb21taXQsIF95aWVsZCR0YXNrU2VydmljZSRnZSwgZGF0YTsKCiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gdGFza1NlcnZpY2UuZ2V0QWxsVGFza3MoKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBfeWllbGQkdGFza1NlcnZpY2UkZ2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIGRhdGEgPSBfeWllbGQkdGFza1NlcnZpY2UkZ2UuZGF0YTsKICAgICAgICAgICAgICBjb21taXQoJ3NldFRhc2tzJywgZGF0YSk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKICBuZXdUYXNrOiBmdW5jdGlvbiBuZXdUYXNrKF9yZWYyLCB0YXNrKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIGNvbW1pdCwgX3lpZWxkJHRhc2tTZXJ2aWNlJGFkLCBkYXRhOwoKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMi5jb21taXQ7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiB0YXNrU2VydmljZS5hZGROZXdUYXNrKHRhc2spOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIF95aWVsZCR0YXNrU2VydmljZSRhZCA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIGRhdGEgPSBfeWllbGQkdGFza1NlcnZpY2UkYWQuZGF0YTsKICAgICAgICAgICAgICBjb21taXQoJ3VwZGF0ZVRhc2snLCBkYXRhKTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKSgpOwogIH0sCiAgZmV0Y2hUYXNrOiBmdW5jdGlvbiBmZXRjaFRhc2soX3JlZjMsIHRhc2tJZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgIHZhciBjb21taXQsIF95aWVsZCR0YXNrU2VydmljZSRnZTIsIGRhdGE7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0YXNrSWQpOwogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gdGFza1NlcnZpY2UuZ2V0VGFzayh0YXNrSWQpOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIF95aWVsZCR0YXNrU2VydmljZSRnZTIgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICBkYXRhID0gX3lpZWxkJHRhc2tTZXJ2aWNlJGdlMi5kYXRhOwogICAgICAgICAgICAgIGNvbW1pdCgnc2V0VGFzaycsIGRhdGEpOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTMpOwogICAgfSkpKCk7CiAgfSwKICBkZWxldGVUYXNrOiBmdW5jdGlvbiBkZWxldGVUYXNrKF9yZWY0LCB0YXNrSWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICB2YXIgY29tbWl0LCBfeWllbGQkdGFza1NlcnZpY2UkZGUsIGRhdGE7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY0LmNvbW1pdDsKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIHRhc2tTZXJ2aWNlLmRlbGV0ZVRhc2sodGFza0lkKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBfeWllbGQkdGFza1NlcnZpY2UkZGUgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICBkYXRhID0gX3lpZWxkJHRhc2tTZXJ2aWNlJGRlLmRhdGE7CiAgICAgICAgICAgICAgY29tbWl0KCdkZWxldGVUYXNrJywgZGF0YSk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlNCk7CiAgICB9KSkoKTsKICB9Cn07CnZhciBtdXRhdGlvbnMgPSB7CiAgc2V0VGFza3M6IGZ1bmN0aW9uIHNldFRhc2tzKHN0YXRlLCB0YXNrcykgewogICAgcmV0dXJuIHN0YXRlLnRhc2tzID0gdGFza3MuZGF0YTsKICB9LAogIHVwZGF0ZVRhc2s6IGZ1bmN0aW9uIHVwZGF0ZVRhc2soc3RhdGUsIHRhc2spIHsKICAgIHJldHVybiBzdGF0ZS50YXNrcy5wdXNoKHRhc2suZGF0YSk7CiAgfSwKICBzZXRUYXNrOiBmdW5jdGlvbiBzZXRUYXNrKHN0YXRlLCB0YXNrKSB7CiAgICBjb25zb2xlLmxvZyh0YXNrKTsKICAgIHJldHVybiBzdGF0ZS50YXNrID0gdGFzay5kYXRhOwogIH0sCiAgZGVsZXRlVGFzazogZnVuY3Rpb24gZGVsZXRlVGFzayhzdGF0ZSwgdGFzaykgewogICAgcmV0dXJuIHN0YXRlLnRhc2tzID0gc3RhdGUudGFza3MuZmlsdGVyKGZ1bmN0aW9uICh0KSB7CiAgICAgIHJldHVybiB0YXNrLmlkICE9PSB0LmlkOwogICAgfSk7CiAgfQp9Owp2YXIgZ2V0dGVycyA9IHsKICBnZXRUYXNrczogZnVuY3Rpb24gZ2V0VGFza3Moc3RhdGUpIHsKICAgIGNvbnNvbGUubG9nKHN0YXRlLnRhc2tzKTsKICAgIHJldHVybiBzdGF0ZS50YXNrczsKICB9LAogIGdldFRhc2s6IGZ1bmN0aW9uIGdldFRhc2soc3RhdGUpIHsKICAgIGNvbnNvbGUubG9nKHN0YXRlLnRhc2spOwogICAgcmV0dXJuIHN0YXRlLnRhc2s7CiAgfQp9OwpleHBvcnQgZGVmYXVsdCB7CiAgc3RhdGU6IHN0YXRlLAogIGFjdGlvbnM6IGFjdGlvbnMsCiAgbXV0YXRpb25zOiBtdXRhdGlvbnMsCiAgZ2V0dGVyczogZ2V0dGVycwp9Ow=="},{"version":3,"sources":["/Users/nafizbayrak/Downloads/task-Man/task-man/src/store/modules/tasks.module.js"],"names":["taskService","state","tasks","task","actions","fetchTasks","commit","getAllTasks","data","newTask","addNewTask","fetchTask","taskId","console","log","getTask","deleteTask","mutations","setTasks","updateTask","push","setTask","filter","t","id","getters","getTasks"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,2BAAxB;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAE,EADG;AAEVC,EAAAA,IAAI,EAAE;AAFI,CAAd;AAKA,IAAMC,OAAO,GAAG;AACNC,EAAAA,UADM,4BACiB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAVC,cAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA,qBACFN,WAAW,CAACO,WAAZ,EADE;;AAAA;AAAA;AACjBC,cAAAA,IADiB,yBACjBA,IADiB;AAEzBF,cAAAA,MAAM,CAAC,UAAD,EAAaE,IAAb,CAAN;;AAFyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG5B,GAJW;AAKNC,EAAAA,OALM,0BAKcN,IALd,EAKoB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAhBG,cAAAA,MAAgB,SAAhBA,MAAgB;AAAA;AAAA,qBACLN,WAAW,CAACU,UAAZ,CAAuBP,IAAvB,CADK;;AAAA;AAAA;AACpBK,cAAAA,IADoB,yBACpBA,IADoB;AAE5BF,cAAAA,MAAM,CAAC,YAAD,EAAeE,IAAf,CAAN;;AAF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG/B,GARW;AASNG,EAAAA,SATM,4BASgBC,MAThB,EASwB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAlBN,cAAAA,MAAkB,SAAlBA,MAAkB;AAChCO,cAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AADgC;AAAA,qBAETZ,WAAW,CAACe,OAAZ,CAAoBH,MAApB,CAFS;;AAAA;AAAA;AAExBJ,cAAAA,IAFwB,0BAExBA,IAFwB;AAGhCF,cAAAA,MAAM,CAAC,SAAD,EAAYE,IAAZ,CAAN;;AAHgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAInC,GAbW;AAcNQ,EAAAA,UAdM,6BAccJ,MAdd,EAcqB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAfN,cAAAA,MAAe,SAAfA,MAAe;AAAA;AAAA,qBACRN,WAAW,CAACgB,UAAZ,CAAuBJ,MAAvB,CADQ;;AAAA;AAAA;AACtBJ,cAAAA,IADsB,yBACtBA,IADsB;AAE7BF,cAAAA,MAAM,CAAC,YAAD,EAAcE,IAAd,CAAN;;AAF6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGhC;AAjBW,CAAhB;AAoBA,IAAMS,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,kBAACjB,KAAD,EAAQC,KAAR,EAAkB;AACxB,WAAOD,KAAK,CAACC,KAAN,GAAcA,KAAK,CAACM,IAA3B;AACH,GAHa;AAIdW,EAAAA,UAAU,EAAE,oBAAClB,KAAD,EAAQE,IAAR,EAAiB;AACzB,WAAOF,KAAK,CAACC,KAAN,CAAYkB,IAAZ,CAAiBjB,IAAI,CAACK,IAAtB,CAAP;AACH,GANa;AAOda,EAAAA,OAAO,EAAE,iBAACpB,KAAD,EAAQE,IAAR,EAAiB;AACtBU,IAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACA,WAAOF,KAAK,CAACE,IAAN,GAAaA,IAAI,CAACK,IAAzB;AACH,GAVa;AAWdQ,EAAAA,UAAU,EAAC,oBAACf,KAAD,EAAOE,IAAP;AAAA,WAAeF,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,CAAYoB,MAAZ,CAAmB,UAAAC,CAAC;AAAA,aAAIpB,IAAI,CAACqB,EAAL,KAAYD,CAAC,CAACC,EAAlB;AAAA,KAApB,CAA7B;AAAA;AAXG,CAAlB;AAeA,IAAMC,OAAO,GAAG;AACZC,EAAAA,QAAQ,EAAE,kBAACzB,KAAD,EAAW;AACjBY,IAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACC,KAAlB;AACA,WAAOD,KAAK,CAACC,KAAb;AACH,GAJW;AAKZa,EAAAA,OAAO,EAAE,iBAACd,KAAD,EAAW;AAChBY,IAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACE,IAAlB;AACA,WAAOF,KAAK,CAACE,IAAb;AACH;AARW,CAAhB;AAYA,eAAe;AACXF,EAAAA,KAAK,EAALA,KADW;AAEXG,EAAAA,OAAO,EAAPA,OAFW;AAGXa,EAAAA,SAAS,EAATA,SAHW;AAIXQ,EAAAA,OAAO,EAAPA;AAJW,CAAf","sourcesContent":["import taskService from '../../common/task.service'\n\nconst state = {\n    tasks: [],\n    task: {}\n};\n\nconst actions = {\n    async fetchTasks({ commit }) {\n        const { data } = await taskService.getAllTasks()\n        commit('setTasks', data)\n    },\n    async newTask({ commit }, task) {\n        const { data } = await taskService.addNewTask(task)\n        commit('updateTask', data)\n    },\n    async fetchTask({ commit }, taskId) {\n        console.log(taskId)\n        const { data } = await taskService.getTask(taskId)\n        commit('setTask', data)\n    },\n    async deleteTask({commit},taskId){\n        const {data} = await taskService.deleteTask(taskId)\n        commit('deleteTask',data)\n    }\n};\n\nconst mutations = {\n    setTasks: (state, tasks) => {\n        return state.tasks = tasks.data\n    },\n    updateTask: (state, task) => {\n        return state.tasks.push(task.data)\n    },\n    setTask: (state, task) => {\n        console.log(task)\n        return state.task = task.data\n    },\n    deleteTask:(state,task)=> state.tasks = state.tasks.filter(t => task.id !== t.id)\n         \n    \n};\nconst getters = {\n    getTasks: (state) => {\n        console.log(state.tasks)\n        return state.tasks\n    },\n    getTask: (state) => {\n        console.log(state.task)\n        return state.task\n    }\n\n};\n\nexport default {\n    state,\n    actions,\n    mutations,\n    getters\n}"]}]}