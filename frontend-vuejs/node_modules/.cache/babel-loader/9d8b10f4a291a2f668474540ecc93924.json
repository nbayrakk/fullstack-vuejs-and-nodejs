{"remainingRequest":"/Users/nafizbayrak/Downloads/task-Man/task-man/node_modules/babel-loader/lib/index.js!/Users/nafizbayrak/Downloads/task-Man/task-man/node_modules/eslint-loader/index.js??ref--13-0!/Users/nafizbayrak/Downloads/task-Man/task-man/src/store/modules/tasks.module.js","dependencies":[{"path":"/Users/nafizbayrak/Downloads/task-Man/task-man/src/store/modules/tasks.module.js","mtime":1620991012710},{"path":"/Users/nafizbayrak/Downloads/task-Man/task-man/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nafizbayrak/Downloads/task-Man/task-man/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/nafizbayrak/Downloads/task-Man/task-man/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9uYWZpemJheXJhay9Eb3dubG9hZHMvdGFzay1NYW4vdGFzay1tYW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCB0YXNrU2VydmljZSBmcm9tICcuLi8uLi9jb21tb24vdGFzay5zZXJ2aWNlJzsKdmFyIHN0YXRlID0gewogIHRhc2tzOiBbXQp9Owp2YXIgYWN0aW9ucyA9IHsKICAvLyBhc3luYyBmZXRjaFRhc2tzKHsgY29tbWl0IH0pIHsKICAvLyAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0YXNrU2VydmljZS5nZXRBbGxUYXNrcygpCiAgLy8gICAgIGNvbnNvbGUubG9nKGRhdGEpCiAgLy8gICAgIGNvbW1pdCgnc2V0VGFza3MnLCBkYXRhKQogIC8vIH0sCiAgZmV0Y2hUYXNrczogZnVuY3Rpb24gZmV0Y2hUYXNrcyhfcmVmKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgY29tbWl0LCBfeWllbGQkdGFza1NlcnZpY2UkZ2UsIGRhdGE7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIHRhc2tTZXJ2aWNlLmdldEFsbFRhc2tzKCk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgX3lpZWxkJHRhc2tTZXJ2aWNlJGdlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBkYXRhID0gX3lpZWxkJHRhc2tTZXJ2aWNlJGdlLmRhdGE7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7CiAgICAgICAgICAgICAgY29tbWl0KCdzZXRUYXNrcycsIGRhdGEpOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSgpOwogIH0sCiAgbmV3VGFzazogZnVuY3Rpb24gbmV3VGFzayhfcmVmMiwgdGFzaykgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHZhciBjb21taXQsIF95aWVsZCR0YXNrU2VydmljZSRhZCwgZGF0YTsKCiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjIuY29tbWl0OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gdGFza1NlcnZpY2UuYWRkTmV3VGFzayh0YXNrKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBfeWllbGQkdGFza1NlcnZpY2UkYWQgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICBkYXRhID0gX3lpZWxkJHRhc2tTZXJ2aWNlJGFkLmRhdGE7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7CiAgICAgICAgICAgICAgY29tbWl0KCd1cGRhdGVUYXNrJywgZGF0YSk7CgogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSkoKTsKICB9Cn07CnZhciBtdXRhdGlvbnMgPSB7CiAgc2V0VGFza3M6IGZ1bmN0aW9uIHNldFRhc2tzKHN0YXRlLCB0YXNrcykgewogICAgcmV0dXJuIHN0YXRlLnRhc2tzID0gdGFza3MuZGF0YTsKICB9LAogIHVwZGF0ZVRhc2s6IGZ1bmN0aW9uIHVwZGF0ZVRhc2soc3RhdGUsIHRhc2spIHsKICAgIHJldHVybiBzdGF0ZS50YXNrcy5wdXNoKHRhc2spOwogIH0KfTsKdmFyIGdldHRlcnMgPSB7CiAgZ2V0VGFza3M6IGZ1bmN0aW9uIGdldFRhc2tzKHN0YXRlKSB7CiAgICBjb25zb2xlLmxvZyhzdGF0ZS50YXNrcy5kYXRhKTsKICAgIHJldHVybiBzdGF0ZS50YXNrczsKICB9Cn07CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogc3RhdGUsCiAgYWN0aW9uczogYWN0aW9ucywKICBtdXRhdGlvbnM6IG11dGF0aW9ucywKICBnZXR0ZXJzOiBnZXR0ZXJzCn07"},{"version":3,"sources":["/Users/nafizbayrak/Downloads/task-Man/task-man/src/store/modules/tasks.module.js"],"names":["taskService","state","tasks","actions","fetchTasks","commit","getAllTasks","data","console","log","newTask","task","addNewTask","mutations","setTasks","updateTask","push","getters","getTasks"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,2BAAxB;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAE;AADG,CAAd;AAIA,IAAMC,OAAO,GAAG;AACZ;AACA;AACA;AACA;AACA;AACMC,EAAAA,UANM,4BAMgB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAATC,cAAAA,MAAS,QAATA,MAAS;AAAA;AAAA,qBACDL,WAAW,CAACM,WAAZ,EADC;;AAAA;AAAA;AAChBC,cAAAA,IADgB,yBAChBA,IADgB;AAExBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAF,cAAAA,MAAM,CAAC,UAAD,EAAYE,IAAZ,CAAN;;AAHwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI3B,GAVW;AAWNG,EAAAA,OAXM,0BAWaC,IAXb,EAWkB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAdN,cAAAA,MAAc,SAAdA,MAAc;AAAA;AAAA,qBACLL,WAAW,CAACY,UAAZ,CAAuBD,IAAvB,CADK;;AAAA;AAAA;AACnBJ,cAAAA,IADmB,yBACnBA,IADmB;AAE1BC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAF,cAAAA,MAAM,CAAC,YAAD,EAAcE,IAAd,CAAN;;AAH0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI7B;AAfW,CAAhB;AAkBA,IAAMM,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,kBAACb,KAAD,EAAOC,KAAP,EAAiB;AACvB,WAAOD,KAAK,CAACC,KAAN,GAAcA,KAAK,CAACK,IAA3B;AACH,GAHa;AAIdQ,EAAAA,UAAU,EAAC,oBAACd,KAAD,EAAOU,IAAP,EAAe;AACtB,WAAOV,KAAK,CAACC,KAAN,CAAYc,IAAZ,CAAiBL,IAAjB,CAAP;AACH;AANa,CAAlB;AASA,IAAMM,OAAO,GAAG;AACZC,EAAAA,QAAQ,EAAE,kBAACjB,KAAD,EAAW;AACjBO,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACC,KAAN,CAAYK,IAAxB;AACA,WAAON,KAAK,CAACC,KAAb;AACH;AAJW,CAAhB;AAOA,eAAe;AACXD,EAAAA,KAAK,EAALA,KADW;AAEXE,EAAAA,OAAO,EAAPA,OAFW;AAGXU,EAAAA,SAAS,EAATA,SAHW;AAIXI,EAAAA,OAAO,EAAPA;AAJW,CAAf","sourcesContent":["import taskService from '../../common/task.service'\n\nconst state = {\n    tasks: []\n};\n\nconst actions = {\n    // async fetchTasks({ commit }) {\n    //     const { data } = await taskService.getAllTasks()\n    //     console.log(data)\n    //     commit('setTasks', data)\n    // },\n    async fetchTasks( {commit} ){\n        const { data } = await taskService.getAllTasks()\n        console.log(data)\n        commit('setTasks',data)\n    },\n    async newTask( {commit} ,task){\n        const {data} = await taskService.addNewTask(task)\n        console.log(data)\n        commit('updateTask',data)\n    }\n};\n\nconst mutations = {\n    setTasks: (state,tasks) => {\n        return state.tasks = tasks.data\n    },\n    updateTask:(state,task)=> {\n        return state.tasks.push(task)\n    }\n\n};\nconst getters = {\n    getTasks: (state) => {\n        console.log(state.tasks.data)\n        return state.tasks\n    }\n};\n\nexport default {\n    state,\n    actions,\n    mutations,\n    getters\n}"]}]}